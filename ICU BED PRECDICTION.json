{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e34e8230",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "from sklearn import preprocessing\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "36802712",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(210, 10)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df= pd.read_csv(r'C:\\Users\\jhaar\\Downloads\\ICU_DATA__11.csv')\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a82c2258",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hospital  No.</th>\n",
       "      <th>Day(1-1-2020 to 28-7-2020)</th>\n",
       "      <th>Total ICU Bed</th>\n",
       "      <th>Available Bed</th>\n",
       "      <th>Patient admitted</th>\n",
       "      <th>Pateint discharged</th>\n",
       "      <th>Occupancy</th>\n",
       "      <th>% occupancy</th>\n",
       "      <th>Freebed</th>\n",
       "      <th>%Freebed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>76</td>\n",
       "      <td>50</td>\n",
       "      <td>5</td>\n",
       "      <td>17</td>\n",
       "      <td>14</td>\n",
       "      <td>18.421053</td>\n",
       "      <td>62</td>\n",
       "      <td>81.578947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>76</td>\n",
       "      <td>62</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>15</td>\n",
       "      <td>19.736842</td>\n",
       "      <td>61</td>\n",
       "      <td>80.263158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>76</td>\n",
       "      <td>61</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>13</td>\n",
       "      <td>17.105263</td>\n",
       "      <td>63</td>\n",
       "      <td>82.894737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>76</td>\n",
       "      <td>63</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>11</td>\n",
       "      <td>14.473684</td>\n",
       "      <td>65</td>\n",
       "      <td>85.526316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>76</td>\n",
       "      <td>65</td>\n",
       "      <td>13</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>22.368421</td>\n",
       "      <td>59</td>\n",
       "      <td>77.631579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>1</td>\n",
       "      <td>206</td>\n",
       "      <td>76</td>\n",
       "      <td>49</td>\n",
       "      <td>17</td>\n",
       "      <td>11</td>\n",
       "      <td>33</td>\n",
       "      <td>43.421053</td>\n",
       "      <td>43</td>\n",
       "      <td>56.578947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>1</td>\n",
       "      <td>207</td>\n",
       "      <td>76</td>\n",
       "      <td>43</td>\n",
       "      <td>35</td>\n",
       "      <td>14</td>\n",
       "      <td>54</td>\n",
       "      <td>71.052632</td>\n",
       "      <td>22</td>\n",
       "      <td>28.947368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207</th>\n",
       "      <td>1</td>\n",
       "      <td>208</td>\n",
       "      <td>76</td>\n",
       "      <td>22</td>\n",
       "      <td>2</td>\n",
       "      <td>24</td>\n",
       "      <td>32</td>\n",
       "      <td>42.105263</td>\n",
       "      <td>44</td>\n",
       "      <td>57.894737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208</th>\n",
       "      <td>1</td>\n",
       "      <td>209</td>\n",
       "      <td>76</td>\n",
       "      <td>44</td>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>27</td>\n",
       "      <td>35.526316</td>\n",
       "      <td>49</td>\n",
       "      <td>64.473684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>209</th>\n",
       "      <td>1</td>\n",
       "      <td>210</td>\n",
       "      <td>76</td>\n",
       "      <td>49</td>\n",
       "      <td>12</td>\n",
       "      <td>23</td>\n",
       "      <td>16</td>\n",
       "      <td>21.052632</td>\n",
       "      <td>60</td>\n",
       "      <td>78.947368</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>210 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Hospital  No.  Day(1-1-2020 to 28-7-2020)  Total ICU Bed  Available Bed  \\\n",
       "0                1                           1             76             50   \n",
       "1                1                           2             76             62   \n",
       "2                1                           3             76             61   \n",
       "3                1                           4             76             63   \n",
       "4                1                           5             76             65   \n",
       "..             ...                         ...            ...            ...   \n",
       "205              1                         206             76             49   \n",
       "206              1                         207             76             43   \n",
       "207              1                         208             76             22   \n",
       "208              1                         209             76             44   \n",
       "209              1                         210             76             49   \n",
       "\n",
       "     Patient admitted  Pateint discharged  Occupancy  % occupancy  Freebed  \\\n",
       "0                   5                  17         14    18.421053       62   \n",
       "1                  10                   9         15    19.736842       61   \n",
       "2                   6                   8         13    17.105263       63   \n",
       "3                   8                  10         11    14.473684       65   \n",
       "4                  13                   7         17    22.368421       59   \n",
       "..                ...                 ...        ...          ...      ...   \n",
       "205                17                  11         33    43.421053       43   \n",
       "206                35                  14         54    71.052632       22   \n",
       "207                 2                  24         32    42.105263       44   \n",
       "208                 7                  12         27    35.526316       49   \n",
       "209                12                  23         16    21.052632       60   \n",
       "\n",
       "      %Freebed  \n",
       "0    81.578947  \n",
       "1    80.263158  \n",
       "2    82.894737  \n",
       "3    85.526316  \n",
       "4    77.631579  \n",
       "..         ...  \n",
       "205  56.578947  \n",
       "206  28.947368  \n",
       "207  57.894737  \n",
       "208  64.473684  \n",
       "209  78.947368  \n",
       "\n",
       "[210 rows x 10 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3cbf87f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hospital  No.</th>\n",
       "      <th>Day(1-1-2020 to 28-7-2020)</th>\n",
       "      <th>Total ICU Bed</th>\n",
       "      <th>Available Bed</th>\n",
       "      <th>Patient admitted</th>\n",
       "      <th>Pateint discharged</th>\n",
       "      <th>Occupancy</th>\n",
       "      <th>% occupancy</th>\n",
       "      <th>Freebed</th>\n",
       "      <th>%Freebed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>210.0</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.0</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>210.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.0</td>\n",
       "      <td>105.500000</td>\n",
       "      <td>76.0</td>\n",
       "      <td>38.623810</td>\n",
       "      <td>23.685714</td>\n",
       "      <td>23.733333</td>\n",
       "      <td>37.328571</td>\n",
       "      <td>49.116541</td>\n",
       "      <td>38.671429</td>\n",
       "      <td>50.883459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.0</td>\n",
       "      <td>60.765944</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17.419573</td>\n",
       "      <td>14.484979</td>\n",
       "      <td>15.615455</td>\n",
       "      <td>17.464431</td>\n",
       "      <td>22.979515</td>\n",
       "      <td>17.464431</td>\n",
       "      <td>22.979515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>76.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.0</td>\n",
       "      <td>53.250000</td>\n",
       "      <td>76.0</td>\n",
       "      <td>25.250000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>28.947368</td>\n",
       "      <td>25.250000</td>\n",
       "      <td>33.223684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.0</td>\n",
       "      <td>105.500000</td>\n",
       "      <td>76.0</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>48.684211</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>51.315789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.0</td>\n",
       "      <td>157.750000</td>\n",
       "      <td>76.0</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>32.750000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>50.750000</td>\n",
       "      <td>66.776316</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>71.052632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.0</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>76.0</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Hospital  No.  Day(1-1-2020 to 28-7-2020)  Total ICU Bed  \\\n",
       "count          210.0                  210.000000          210.0   \n",
       "mean             1.0                  105.500000           76.0   \n",
       "std              0.0                   60.765944            0.0   \n",
       "min              1.0                    1.000000           76.0   \n",
       "25%              1.0                   53.250000           76.0   \n",
       "50%              1.0                  105.500000           76.0   \n",
       "75%              1.0                  157.750000           76.0   \n",
       "max              1.0                  210.000000           76.0   \n",
       "\n",
       "       Available Bed  Patient admitted  Pateint discharged   Occupancy  \\\n",
       "count     210.000000        210.000000          210.000000  210.000000   \n",
       "mean       38.623810         23.685714           23.733333   37.328571   \n",
       "std        17.419573         14.484979           15.615455   17.464431   \n",
       "min         0.000000          1.000000            1.000000    0.000000   \n",
       "25%        25.250000         12.000000           12.000000   22.000000   \n",
       "50%        39.000000         21.000000           19.000000   37.000000   \n",
       "75%        54.000000         32.750000           34.000000   50.750000   \n",
       "max        76.000000         77.000000           70.000000   76.000000   \n",
       "\n",
       "       % occupancy     Freebed    %Freebed  \n",
       "count   210.000000  210.000000  210.000000  \n",
       "mean     49.116541   38.671429   50.883459  \n",
       "std      22.979515   17.464431   22.979515  \n",
       "min       0.000000    0.000000    0.000000  \n",
       "25%      28.947368   25.250000   33.223684  \n",
       "50%      48.684211   39.000000   51.315789  \n",
       "75%      66.776316   54.000000   71.052632  \n",
       "max     100.000000   76.000000  100.000000  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c84ef016",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 210 entries, 0 to 209\n",
      "Data columns (total 10 columns):\n",
      " #   Column                      Non-Null Count  Dtype  \n",
      "---  ------                      --------------  -----  \n",
      " 0   Hospital  No.               210 non-null    int64  \n",
      " 1   Day(1-1-2020 to 28-7-2020)  210 non-null    int64  \n",
      " 2   Total ICU Bed               210 non-null    int64  \n",
      " 3   Available Bed               210 non-null    int64  \n",
      " 4   Patient admitted            210 non-null    int64  \n",
      " 5   Pateint discharged          210 non-null    int64  \n",
      " 6   Occupancy                   210 non-null    int64  \n",
      " 7   % occupancy                 210 non-null    float64\n",
      " 8   Freebed                     210 non-null    int64  \n",
      " 9   %Freebed                    210 non-null    float64\n",
      "dtypes: float64(2), int64(8)\n",
      "memory usage: 16.5 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d90f8e1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.heatmap(df.isnull())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "96fb5c59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Hospital  No.                      NaN\n",
       "Day(1-1-2020 to 28-7-2020)   -0.038632\n",
       "Total ICU Bed                      NaN\n",
       "Available Bed                -0.727495\n",
       "Patient admitted              0.280393\n",
       "Pateint discharged           -0.046767\n",
       "Occupancy                     1.000000\n",
       "% occupancy                   1.000000\n",
       "Freebed                      -1.000000\n",
       "%Freebed                     -1.000000\n",
       "Name: Occupancy, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()['Occupancy']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c321a15f",
   "metadata": {},
   "outputs": [],
   "source": [
    "y=df['Occupancy']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "19137ff7",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=df.drop(['Occupancy'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4d04bd91",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0,test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ae4730d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\jhaar\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_logistic.py:765: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "classifier=LogisticRegression(random_state=0,solver='lbfgs')\n",
    "classifier.fit(x_train,y_train)\n",
    "from sklearn.metrics import accuracy_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5f25bd87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.16666666666666666"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "189a5f4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "list_1=[]\n",
    "for i in range(1,11):\n",
    "    knn=KNeighborsClassifier(n_neighbors=i)\n",
    "    knn.fit(x_train,y_train)\n",
    "    pred_1=knn.predict(x_test)\n",
    "    scores=accuracy_score(y_test,pred_1)\n",
    "    list_1.append(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "272552ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot(range(1,11),list_1)\n",
    "plt.xlabel('k values')\n",
    "plt.ylabel('accuracy scores')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e2a43eba",
   "metadata": {},
   "outputs": [],
   "source": [
    "#from the given figure k=3 gives best accuracy score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5494b09b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.14285714285714285\n"
     ]
    }
   ],
   "source": [
    "print(max(list_1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "cff5a570",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rfc=RandomForestClassifier()\n",
    "rfc.fit(x_train,y_train)\n",
    "pred_2=rfc.predict(x_test)\n",
    "score_2=accuracy_score(y_test,pred_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "95ab8049",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6904761904761905"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "score_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a8f3d5d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#from all the model random forest classifier gives the best accuracy score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "75060864",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df=pd.DataFrame({'actual':y_test,\n",
    "                    'predicted':pred_2})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "85420825",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>actual</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>44</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188</th>\n",
       "      <td>22</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122</th>\n",
       "      <td>60</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>58</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>74</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>26</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>76</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>30</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>26</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>36</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>22</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>46</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>59</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134</th>\n",
       "      <td>72</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>54</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124</th>\n",
       "      <td>62</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158</th>\n",
       "      <td>45</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>9</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>57</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>39</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>44</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187</th>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>66</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>39</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>135</th>\n",
       "      <td>62</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>44</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>37</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     actual  predicted\n",
       "12       21         21\n",
       "80       23         23\n",
       "33       44         44\n",
       "5        11         11\n",
       "188      22         22\n",
       "83        2         10\n",
       "116      24         24\n",
       "122      60         62\n",
       "90       58         58\n",
       "154      19         19\n",
       "45       26         26\n",
       "156      74         75\n",
       "52       27         27\n",
       "190      26         27\n",
       "96       76         75\n",
       "86       15         15\n",
       "194      42         42\n",
       "37       30         29\n",
       "66       52         52\n",
       "18       42         42\n",
       "170      26         27\n",
       "15       36         36\n",
       "7        22         22\n",
       "55       46         46\n",
       "92       59         59\n",
       "134      72         74\n",
       "125      54         54\n",
       "124      62         62\n",
       "158      45         46\n",
       "185       9         10\n",
       "75       57         57\n",
       "149      39         39\n",
       "138      44         44\n",
       "71       42         42\n",
       "187      14         14\n",
       "145      48         48\n",
       "176       0         10\n",
       "118      66         64\n",
       "16       39         39\n",
       "135      62         65\n",
       "191      44         44\n",
       "22       37         37"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee16a93c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
